library(caret)
install.packages("caret")
install.packages("caret")
?preProcess
library(caret)
?preProcess
data(iris)
class iris
class(iris
)
iris
head(iris)
library(caret)
library(rstan)
library(loo)
library(shinystan)
source("utils.R")
options(mc.cores=parallel::detectCores())  # use all available cores
random_seed = 12244 # set random seed
datafolder <- '../data/Modeling_Data/'
resultfolder <- '../data/Results/Bayesian_GLM/'
# settings
feature_type <- 'SGLM' # GLM for random CV feature set, SGLM for spatial CV feature set
normalize <- TRUE # TRUE if you want to normalize the data
trainfile <- paste(datafolder,'traindata_',feature_type,'.csv',sep='')
testfile <- paste(datafolder,'testdata_',feature_type,'.csv',sep='')
pres_testfile <- paste(datafolder,'testdata_pres_',feature_type,'.csv',sep='') # present day climatic
##### Preparing the training, validation, and test data #####
# import the present-day climate variables with Asian elephant presence
traindata_master <- read.csv(trainfile, header=TRUE)
# do the training and validation split (validation data != test data)
trainval <- trainvalsplit(traindata_master, 0.8, random_seed=random_seed)
# separate the HIDs, labels, and the features
train_features <- subset(trainval$traindata, select=-c(HID, PA))
train_HID <- subset(trainval$traindata, select=c(HID))
train_labels <- subset(trainval$traindata, select=c(PA))
valid_features <- subset(trainval$validdata, select=-c(HID, PA))
valid_labels <- subset(trainval$validdata, select=c(PA))
valid_HID <- subset(trainval$validdata, select=c(HID))
setwd("~/Documents/sdm-asian-elephants/codes/bayesian_splineGLM/bnorm_sdst/response_notfactor")
library(brms)
library(priorsense)
resultfolder <- '../../data/Results/Bayesian_splineGLM/bnorm_sdst/k_default/'
modelfolder <- './'
feature_type <- 'GLM'
normalize <- TRUE
random_seed = 12244
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_norm_spatialCVfeat_model.rds", sep=''))
}
} else {
if (feature_type=="GLM"){
bssplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_spatialCVfeat_model.rds", sep=''))
}
}
powerscale_sensitivity(bsplineGLM)
powerscale_sensitivity(bsplineGLM, variables = c("b_Intercept"))
powerscale_sensitivity(bsplineGLM,log_prior_fn=extract_log_prior)
?powerscale_sensitivity()
powerscale_sensitivity(bsplineGLM, variable = c("b_Intercept"))
powerscale_sensitivity(x=bsplineGLM, variable = c("b_Intercept"))
powerscale_sensitivity(x=bsplineGLM, variable = c("b"))
powerscale_sensitivity(x=bsplineGLM, variable = c("bs_sWSDI_IDWIN10_1"))
powerscale_sensitivity(x=bsplineGLM, variable = c("WSDI_IDWIN10"))
powerscale_sensitivity(x=bsplineGLM, variable = c("s(BIO3_Mean, k = k)"))
powerscale_sensitivity(x=bsplineGLM, variable = c("mu")
)
powerscale_sensitivity(x=bsplineGLM, variables = c("mu"))
powerscale_sensitivity(bsplineGLM, variables = c("mu"))
powerscale_sensitivity(bsplineGLM)
devtools::update_packages()
