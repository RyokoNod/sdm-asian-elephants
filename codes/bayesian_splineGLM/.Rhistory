conditional_smooths(bsplineGLM)
# conditional effects
condeffs <- conditional_effects(bsplineGLM)
plot(condeffs, points=TRUE)
library(brms)
library(caret)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
modelfolder <- './bnorm_sdst/response_notfactor/'
resultfolder <- '../../data/Results/Bayesian_splineGLM/bnorm_sdst/k_default/'
datafolder <- '../../data/Modeling_Data/'
feature_type <- 'SGLM'
normalize <- FALSE
k <- -1 # the number of basis functions used for the model
random_seed = 12244
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_norm_spatialCVfeat_model.rds", sep=''))
}
} else {
if (feature_type=="GLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_spatialCVfeat_model.rds", sep=''))
}
}
# splines
conditional_smooths(bsplineGLM)
# conditional effects
condeffs <- conditional_effects(bsplineGLM)
plot(condeffs, points=TRUE)
library(caret)
library(brms)
library(MLmetrics)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
options(mc.cores=parallel::detectCores())  # use all available cores
# settings
random_seed = 12244 # set random seed
datafolder <- '../../data/Modeling_Data/'
resultfolder <- '../../data/Results/Bayesian_linearGLM/'
feature_type <- 'GLM' # GLM for random CV feature set, SGLM for spatial CV feature set
normalize <- TRUE # TRUE if you want to normalize the data
adapt_d <- 0.99
treedepth <- 10
# specify file names for data
trainfile <- paste(datafolder,'traindata_',feature_type,'.csv',sep='')
testfile <- paste(datafolder,'testdata_',feature_type,'.csv',sep='')
pres_testfile <- paste(datafolder,'testdata_pres_',feature_type,'.csv',sep='') # present day climatic
# import the present-day climate variables with Asian elephant presence
traindata_master <- read.csv(trainfile, header=TRUE)
library(caret)
library(brms)
library(MLmetrics)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
options(mc.cores=parallel::detectCores())  # use all available cores
# settings
random_seed = 12244 # set random seed
datafolder <- '../../data/Modeling_Data/'
resultfolder <- '../../data/Results/Bayesian_linearGLM/'
feature_type <- 'GLM' # GLM for random CV feature set, SGLM for spatial CV feature set
normalize <- TRUE # TRUE if you want to normalize the data
adapt_d <- 0.99
treedepth <- 10
# specify file names for data
trainfile <- paste(datafolder,'traindata_',feature_type,'.csv',sep='')
testfile <- paste(datafolder,'testdata_',feature_type,'.csv',sep='')
pres_testfile <- paste(datafolder,'testdata_pres_',feature_type,'.csv',sep='') # present day climatic
# import the present-day climate variables with Asian elephant presence
traindata_master <- read.csv(trainfile, header=TRUE)
modelfolder <- './response_notfactor/'
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_spatialCVfeat_model.rds",sep=''))
}
} else {
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_spatialCVfeat_model.rds", sep=''))
}
}
# conditional effects
condeffs <- conditional_effects(blinGLM)
plot(condeffs, points=TRUE)
setwd("~/Documents/sdm-asian-elephants/codes/bayesian_linearGLM")
library(caret)
library(brms)
library(MLmetrics)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
options(mc.cores=parallel::detectCores())  # use all available cores
# settings
random_seed = 12244 # set random seed
datafolder <- '../../data/Modeling_Data/'
resultfolder <- '../../data/Results/Bayesian_linearGLM/'
feature_type <- 'GLM' # GLM for random CV feature set, SGLM for spatial CV feature set
normalize <- TRUE # TRUE if you want to normalize the data
adapt_d <- 0.99
treedepth <- 10
# specify file names for data
trainfile <- paste(datafolder,'traindata_',feature_type,'.csv',sep='')
testfile <- paste(datafolder,'testdata_',feature_type,'.csv',sep='')
pres_testfile <- paste(datafolder,'testdata_pres_',feature_type,'.csv',sep='') # present day climatic
# import the present-day climate variables with Asian elephant presence
traindata_master <- read.csv(trainfile, header=TRUE)
modelfolder <- './response_notfactor/'
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_spatialCVfeat_model.rds",sep=''))
}
} else {
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_spatialCVfeat_model.rds", sep=''))
}
}
# conditional effects
condeffs <- conditional_effects(blinGLM)
plot(condeffs, points=TRUE)
library(caret)
library(brms)
library(MLmetrics)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
options(mc.cores=parallel::detectCores())  # use all available cores
# settings
random_seed = 12244 # set random seed
datafolder <- '../../data/Modeling_Data/'
resultfolder <- '../../data/Results/Bayesian_linearGLM/'
feature_type <- 'SGLM' # GLM for random CV feature set, SGLM for spatial CV feature set
normalize <- TRUE # TRUE if you want to normalize the data
adapt_d <- 0.99
treedepth <- 10
# specify file names for data
trainfile <- paste(datafolder,'traindata_',feature_type,'.csv',sep='')
testfile <- paste(datafolder,'testdata_',feature_type,'.csv',sep='')
pres_testfile <- paste(datafolder,'testdata_pres_',feature_type,'.csv',sep='') # present day climatic
# import the present-day climate variables with Asian elephant presence
traindata_master <- read.csv(trainfile, header=TRUE)
modelfolder <- './response_notfactor/'
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_spatialCVfeat_model.rds",sep=''))
}
} else {
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_spatialCVfeat_model.rds", sep=''))
}
}
# conditional effects
condeffs <- conditional_effects(blinGLM)
plot(condeffs, points=TRUE)
plot(condeffs, points=TRUE)
library(caret)
library(brms)
library(MLmetrics)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
options(mc.cores=parallel::detectCores())  # use all available cores
# settings
random_seed = 12244 # set random seed
datafolder <- '../../data/Modeling_Data/'
resultfolder <- '../../data/Results/Bayesian_linearGLM/'
feature_type <- 'GLM' # GLM for random CV feature set, SGLM for spatial CV feature set
normalize <- TRUE # TRUE if you want to normalize the data
adapt_d <- 0.99
treedepth <- 10
# specify file names for data
trainfile <- paste(datafolder,'traindata_',feature_type,'.csv',sep='')
testfile <- paste(datafolder,'testdata_',feature_type,'.csv',sep='')
pres_testfile <- paste(datafolder,'testdata_pres_',feature_type,'.csv',sep='') # present day climatic
# import the present-day climate variables with Asian elephant presence
traindata_master <- read.csv(trainfile, header=TRUE)
modelfolder <- './response_notfactor/'
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_spatialCVfeat_model.rds",sep=''))
}
} else {
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_spatialCVfeat_model.rds", sep=''))
}
}
# conditional effects
condeffs <- conditional_effects(blinGLM)
plot(condeffs, points=TRUE)
?marginal_effects
?marginal_effects()
# conditional regression line
condreg <- conditional_effects(blinGLM, method="posterior_linpred")
plot(condreg, points=TRUE)
plot(condreg)
library(caret)
library(brms)
library(MLmetrics)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
options(mc.cores=parallel::detectCores())  # use all available cores
# settings
random_seed = 12244 # set random seed
datafolder <- '../../data/Modeling_Data/'
resultfolder <- '../../data/Results/Bayesian_linearGLM/'
feature_type <- 'SGLM' # GLM for random CV feature set, SGLM for spatial CV feature set
normalize <- TRUE # TRUE if you want to normalize the data
adapt_d <- 0.99
treedepth <- 10
# specify file names for data
trainfile <- paste(datafolder,'traindata_',feature_type,'.csv',sep='')
testfile <- paste(datafolder,'testdata_',feature_type,'.csv',sep='')
pres_testfile <- paste(datafolder,'testdata_pres_',feature_type,'.csv',sep='') # present day climatic
# import the present-day climate variables with Asian elephant presence
traindata_master <- read.csv(trainfile, header=TRUE)
modelfolder <- './response_notfactor/'
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_spatialCVfeat_model.rds",sep=''))
}
} else {
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_spatialCVfeat_model.rds", sep=''))
}
}
# conditional regression line
condreg <- conditional_effects(blinGLM, method="posterior_linpred")
plot(condreg)
}
} else {
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_spatialCVfeat_model.rds", sep=''))
}
}
# conditional regression line
condreg <- conditional_effects(blinGLM, method="posterior_linpred")
plot(condreg)
library(caret)
library(brms)
library(MLmetrics)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
options(mc.cores=parallel::detectCores())  # use all available cores
# settings
random_seed = 12244 # set random seed
datafolder <- '../../data/Modeling_Data/'
resultfolder <- '../../data/Results/Bayesian_linearGLM/'
feature_type <- 'SGLM' # GLM for random CV feature set, SGLM for spatial CV feature set
normalize <-FALSE # TRUE if you want to normalize the data
adapt_d <- 0.99
treedepth <- 10
# specify file names for data
trainfile <- paste(datafolder,'traindata_',feature_type,'.csv',sep='')
testfile <- paste(datafolder,'testdata_',feature_type,'.csv',sep='')
pres_testfile <- paste(datafolder,'testdata_pres_',feature_type,'.csv',sep='') # present day climatic
# import the present-day climate variables with Asian elephant presence
traindata_master <- read.csv(trainfile, header=TRUE)
modelfolder <- './response_notfactor/'
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_spatialCVfeat_model.rds",sep=''))
}
} else {
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_spatialCVfeat_model.rds", sep=''))
}
}
# conditional regression line
condreg <- conditional_effects(blinGLM, method="posterior_linpred")
plot(condreg)
condeffs <- conditional_effects(blinGLM)
plot(condeffs, points=TRUE)
library(caret)
library(brms)
library(MLmetrics)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
options(mc.cores=parallel::detectCores())  # use all available cores
# settings
random_seed = 12244 # set random seed
datafolder <- '../../data/Modeling_Data/'
resultfolder <- '../../data/Results/Bayesian_linearGLM/'
feature_type <- 'SGLM' # GLM for random CV feature set, SGLM for spatial CV feature set
normalize <-TRUE # TRUE if you want to normalize the data
adapt_d <- 0.99
treedepth <- 10
modelfolder <- './response_notfactor/'
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_norm_spatialCVfeat_model.rds",sep=''))
}
} else {
if (feature_type=="GLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
blinGLM <- readRDS(paste(modelfolder, "bayeslinGLM_spatialCVfeat_model.rds", sep=''))
}
}
# conditional regression line
condreg <- conditional_effects(blinGLM, method="posterior_linpred")
plot(condreg)
setwd("~/Documents/sdm-asian-elephants/codes/bayesian_splineGLM")
library(brms)
library(caret)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
modelfolder <- './'
resultfolder <- '../../data/Results/Bayesian_splineGLM/bnorm_sdst/k_default/'
datafolder <- '../../data/Modeling_Data/'
feature_type <- 'GLM'
normalize <- TRUE
k <- -1 # the number of basis functions used for the model
random_seed = 12244
# Conditional smooths and effects -----------------------------------------------------
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_norm_spatialCVfeat_model.rds", sep=''))
}
} else {
if (feature_type=="GLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_spatialCVfeat_model.rds", sep=''))
}
}
library(priorsense)
library(priorsense)
devtools::update_packages()
devtools::install_github("n-kall/priorsense", ref = "ui-changes"
)
devtools::install_github("n-kall/priorsense", ref = "ui-changes", force = TRUE)
library(priorsense)
powerscale_sensitivity(bsplineGLM)
?validate_ll
?validate_ll()
powerscale_sensitivity(bsplineGLM, variables = c("mu", "sigma"))
library(brms)
library(caret)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
modelfolder <- './'
resultfolder <- '../../data/Results/Bayesian_splineGLM/bnorm_sdst/k_default/'
datafolder <- '../../data/Modeling_Data/'
feature_type <- 'GLM'
normalize <-FALSE
k <- -1 # the number of basis functions used for the model
random_seed = 12244
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_norm_spatialCVfeat_model.rds", sep=''))
}
} else {
if (feature_type=="GLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_spatialCVfeat_model.rds", sep=''))
}
}
powerscale_sensitivity(bsplineGLM, variables = c("mu", "sigma"))
library(brms)
library(caret)
library(dplyr)
library(formattable)
library(reliabilitydiag)
library(shinystan)
source("../utils.R")
modelfolder <- './'
resultfolder <- '../../data/Results/Bayesian_splineGLM/bnorm_sdst/k_default/'
datafolder <- '../../data/Modeling_Data/'
feature_type <- 'SGLM'
normalize <-TRUE
k <- -1 # the number of basis functions used for the model
random_seed = 12244
# Conditional smooths and effects -----------------------------------------------------
# load model
if (normalize==TRUE){
if (feature_type=="GLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_norm_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_norm_spatialCVfeat_model.rds", sep=''))
}
} else {
if (feature_type=="GLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_randCVfeat_model.rds", sep=''))
}
if (feature_type=="SGLM"){
bsplineGLM <- readRDS(paste(modelfolder, "bayessplineGLM_spatialCVfeat_model.rds", sep=''))
}
}
powerscale_sensitivity(bsplineGLM, variables = c("mu", "sigma"))
test <- powerscale_sensitivity(bsplineGLM, variables = c("mu", "sigma"))
warnings()
View(test)
test$sensitivity
sens <- testt$sensitivity
sens <- test$sensitivity
View(sens)
colnames(bsplineGLM$fit@sim$samples)
bsplineGLM$fit@sim$samples
names(bsplineGLM$fit@sim$samples)
names(bsplineGLM$fit@sim$samples$)
names(bsplineGLM$fit@sim)
names(bsplineGLM$fit@sim$samples)
names(bsplineGLM$fit@sim$samples$ )
# see model statistics in shinystan
my_sso <- launch_shinystan(bsplineGLM)
update.packages(shinystan)
update.packages("shinystan")
# see model statistics in shinystan
my_sso <- launch_shinystan(bsplineGLM)
devtools::update_packages()
# see model statistics in shinystan
my_sso <- launch_shinystan(bsplineGLM)
parnames(bsplineGLM)
devtools::install_github("stan-dev/shinystan", build_vignettes = TRUE)
# see model statistics in shinystan
my_sso <- launch_shinystan(bsplineGLM)
